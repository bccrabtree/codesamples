<?xml version="1.0" encoding="utf-8"?> 
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:views="views.*"
			   creationComplete="initApp()"
			   xmlns:custom="custom.*"
			   minWidth="1000" minHeight="700" 
			   xmlns:JSA="custom.JSA.*"
			   xmlns:admin="custom.admin.*"
			   xmlns:login="custom.login.*"> 
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.header {
			fontSize: 24px;
			fontWeight: bold;
			color: navy;
		}
		
		.smallText {
			fontSize: 10px;
		}
		
	</fx:Style>
	
	
	
	
	<fx:Script> 
		<![CDATA[ 
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.core.INavigatorContent;
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			
			import skins.*;
			
			import spark.events.IndexChangeEvent;
			import spark.components.TitleWindow;
			
			import testing.TreeItemRendererV1;
			
			import valueObjects.User;
			
			import custom.ProgressBar;
			
			//object to hold current user's info
			[Bindable]
			public var currentUser:User = new User();
			
			//object to hold event result of getProcesses function
			private var processesXML:XML;
			
			public var processBox:ProcessBox;
			
			//progress bar object
			private var progressBarBox:TitleWindow;
			
			[Bindable]
			public var arrayHistory:ArrayList = new ArrayList();
			
			[Bindable]
			public var selectedProcessName:String = "";
			
			[Bindable]
			public var selectedProcessStatus:int;
			
			//this determines which form is displayed: JSA, Issues, Controls, etc.
			//0= jobinfo, 1=issues
			[Bindable]
			public var currentFormType:int = 0;
			
			//this determines which form category is displayed (for issues and audits form types)
			//0 = none (applies to other form types besides issues/audits), 1=safety, 2=quality, 3=lean
			[Bindable]
			public var currentFormCategory:int = 0;
			
			
			//wrapper object to expose processesXML data for use in Flex Tree control
			[Bindable]
			public var processTreeData:XMLListCollection = new XMLListCollection();
			
			private var processTreeTestingData:XMLList = new XMLList;
			
			//this object holds all the data (including form groups and fields as well as actual data) 
			//returned for the selected process
			[Bindable]
			public var processInfo:Array = new Array();

			//this variable tells us which item is selected in the process tree
			[Bindable]
			public var selectedProcessID:int = 0;
			
			//this variable tells us the permissions level of the user
			//0=not logged in, 1=admin, 2=writer, 3=reader
			[Bindable]
			public var userLevel:int = 3;
			
			//Admin menu data
			[Bindable]
			private var adminMenuData:ArrayList = new ArrayList([
				{label: "Account"},
				{label: "Users"} 
				]); 
				
			//JSA menu data
			[Bindable]
			private var jsaMenuData:ArrayList = new ArrayList([
				{label: "Process Information", data: "0"},
				{label: "Injuries/Near Misses", data: "1"}, 
				{label: "Issues", data: "2"},
				{label: "Comments", data: "3"}, 
				{label: "Controls", data: "4"}, 
				{label: "MSDS", data: "5"}, 
				{label: "Actions", data: "6"}, 
				{label: "Audits", data: "7"}
			]);
			
			[Bindable]
			[Embed("images/buttons/process_type_1.png")]
			public var Location:Class;
			
			[Bindable]
			[Embed("images/buttons/process_type_2.png")]
			public var Department:Class;

			[Bindable]
			[Embed("images/buttons/process_type_3.png")]
			public var Area:Class;

			[Bindable]
			[Embed("images/buttons/process_type_4.png")]
			public var Position:Class;

			[Bindable]
			[Embed("images/buttons/process_type_5.png")]
			public var Job:Class;

			[Bindable]
			[Embed("images/buttons/process_type_6.png")]
			public var Task:Class;

			[Bindable]
			[Embed("images/buttons/process_type_7.png")]
			public var Subtask:Class;
			
			[Bindable]
			[Embed("images/buttons/process_deleted.png")]
			public var Deleted:Class;
			
			[Bindable]
			public var promptForUpdate:Boolean;
			
			//object to hold event result of getTypes function
			private var typesXML:XML;
			
			//wrapper object to expose processesXML data for use in Flex Tree control
			[Bindable]
			public var typesTreeData:XMLListCollection = new XMLListCollection();
			
			//ID of the currently selected form instance (for issue, control, comments, and audits forms)
			[Bindable]
			public var currentInstanceID:int = 0;
			
			[Bindable]
			public var instances:ArrayCollection = new ArrayCollection();
			
			
			//	****	PROGRESS BAR BOX CODE  XXXX  ****************************************************************
			
			private function showProgressBar():void
			{
				progressBarBox = PopUpManager.createPopUp(this, custom.ProgressBar, true)
					as TitleWindow;
				PopUpManager.centerPopUp(progressBarBox);
			}
			
			//function to remove progress bar popup (the progressBarBox popup is also removed by
			//the refreshContract result handler; this function is called when the refreshContracts
			//function is NOT called due to some error condition)
			private function removeProgressBar():void
			{
				PopUpManager.removePopUp(progressBarBox);
			}			
			
			private function tree_iconFunc(item:Object):Class {
				
				var iconClass:Class;
				
				if (item.@status == 0)
				{
					iconClass = Deleted;
				}
				
				else 
				{
					var processType:String = item.@processtype;

					switch(processType) {
						case "Location":
							iconClass = Location;
							break;
						case "Department":
							iconClass = Department;
							break;
						case "Area":
							iconClass = Area;
							break;
	
						case "Position":
							iconClass = Position;
							break;
	
						case "Job":
							iconClass = Job;
							break;
						case "Task":
							iconClass = Task;
							break;
						case "Subtask":
							iconClass = Subtask;
							break;
					}
				}
				return iconClass
			}
			
			private function adminMenuHandler():void
			{
			
			}
			
			private function jsaMenuHandler(event:IndexChangeEvent):void
			{
				currentFormType = jsaMenu.selectedItem.data;
				currentInstanceID = 0;
				
				if (RightPanel.selectedIndex != 1)
				{
					RightPanel.selectedIndex = 1;
				}

				if (selectedProcessStatus == 1)
				{
					//for issues and controls, get stored types 
					if ( (currentFormType == 2) || (currentFormType == 3) || (currentFormType == 4) || (currentFormType == 7) )
					{
						currentFormCategory = 1;
						JobInfo.formCategoriesMenu.selectedIndex = 0;
						JobInfo.currentFormCategoryDescription = "Safety";
						typesCFC.getTypes(currentUser.siteID, currentFormType);
						formsCFC.getInstances(selectedProcessID, currentFormType, currentFormCategory);
					}
					
					else
					{
						currentFormCategory = 0;
						JobInfo.formCategoriesMenu.selectedIndex = 0;
					}
					
					showProgressBar();
					formsCFC.getProcessInfo(selectedProcessID, currentFormType, currentFormCategory, currentInstanceID);
				}
			}
				//this gets the processes for the tree on the left
			private function initApp():void 
			{
				//RightPanel.selectedIndex = 0;
				
			}
			
			private function loginResultHandler(event:ResultEvent):void
			{
				currentUser = event.result as User;
				//if login succeeds . . . 
				if (currentUser.loggedIn)
				{
					processesCFC.getProcesses(currentUser.siteID, showAllProcesses.selected);
					
				}
				else
				{
					
				}
			}
			
			private function Logout(): void 
			{
				currentUser = new User();
				adminMenu.visible = false;
				jsaMenu.visible = false;
				logoutButton.visible = false;
				processTreeData = new XMLListCollection();
				JobInfo.wrapperGroup.removeAllElements();
				JobInfo.addFieldGroupButton.visible = false;
				JobInfo.formNamePrompt.visible = false;
				JobInfo.formName.visible = false;
				JobInfo.submitProcessButton.visible = false;
				JobInfo.headerLabel.text = "";
				RightPanel.selectedIndex = 0;
				processTree.editable = false;
				addProcess.visible = false;
				deleteProcess.visible = false;
				siteNameLabel.text = null;
				userGreeting.text = "";
				showAllProcesses.visible = false;
			}
			
			private function menuHandler(event:MenuEvent):void 
			{
				var item:XML = XML(event.item);
				RightPanel.selectedIndex = item.@data; 
				
				if (RightPanel.selectedIndex == 0) 
				{
					if (selectedProcessID != 0) 
					{
						showProgressBar();
						formsCFC.getProcessInfo(selectedProcessID, currentFormType);
					}
					else
					{
						Alert.show("Please select a process");
					}
				}
			}
			
			//handler to populate type trees with data
			private function getTypesResultHandler(event:ResultEvent):void
			{
				typesXML = event.result as XML;
				typesTreeData.source = typesXML.children();
			}

			//handler to populate processes tree with data	
			private function getProcessesResultHandler(event:ResultEvent):void 
			{
				
				processesXML = event.result as XML;
				processTreeData.source = processesXML.children();
				showAllProcesses.visible = true;
				//this.validateNow();
				//processTree.expandChildrenOf(processTreeData[0], true);
				
				
				/*var filter:Array = tree.dataProvider.toArray().filter(filterFunc) 
				if (filter.length > 0)     
					tree.selectedIndex = tree.dataProvider.getItemIndex(filter[0]);  protected function filterFunc(item:*, index:int, array:Array):Boolean{     return (item as MenuItem).menuItemId == "2" } 
				*/
				
				/*var myXMLList:XMLList = processTreeData.descendants().(@pk_nodeid==69);
				var myXMLNode:XML = myXMLList[0];
				var myDesiredIndex:int = processTree.getItemIndex(myXMLNode);
				var myAttributeList:XMLList = processTreeData.attribute("@pk_nodeid");
				var mySelectedIndices:Array = new Array();
				mySelectedIndices.push("5");
				mySelectedIndices.push("7");
				processTreeData.descendants().(@pk_nodeid==69).@checked = 1;
				processTree.selectedIndices = mySelectedIndices;*/
				//processTree.validateNow();
				
				
				
				
				//var myXMLNode:XMLList = processTreeData.source.(@pk_nodeid==57);
				//processTreeTestingData = event.result as XML;
				//var myXMLNode:XMLList  = processesXML.descendants().(@pk_nodeid==57);
				//processTree.selectedItem = processTree.getChildAt(processesXML.descendants().(@pk_nodeid==57));
				//processTree.validateNow();
				//processTree.selectedItem = myXMLNode[0];
				//var theIndex:int = processesXML.descendants().(@pk_nodeid==57).childIndex();
				//processTree.selectedItem = myXMLNode[0];
				//var theIndex:int = processTreeData.getItemIndex((node.@pk_nodeid==57));
				//trace(processesXML.node.(@pk_nodeid==57).childIndex())
				//trace(processTreeData[0].node.(@pk_nodeid==57).childIndex())
				
				if (currentUser.accessLevel > 3)
				{
					addProcess.visible = true;
					addProcess.setStyle("skinClass", Class(skins.Plus_Green));
					addProcess.toolTip = "Add new top-level process";
				}
				deleteProcess.visible = false;
				restoreProcess.visible = false;
			}
			
			//handler to populate processInfo array collection with data for selected process
			//this data is used to popualate the JobInfo component
			private function getProcessInfoResultHandler(event:ResultEvent):void 
			{
				processInfo = event.result.DATA as Array;
				JobInfo.refreshJobInfo();
				removeProgressBar();
			}
			
			private function getInstancesResultHandler(event:ResultEvent):void
			{
				instances = event.result as ArrayCollection;
			}
			
			private function genericFaultHandler(event:FaultEvent):void
			{
				Alert.show(event.message.toString());	
			}
			
			private function treeChanged(event:Event):void 
			{
				
				//Alert.show(promptForUpdate.toString());
				//trace(processTree.selectedIndex);
				//set variables for selected node and items
				var selectedNode:Object;
				selectedNode=Tree(event.target).selectedItem as XML;
				selectedProcessStatus=selectedNode.@status;
				selectedProcessID=selectedNode.@pk_nodeid;
				selectedProcessName=selectedNode.@nodename;
				//trace("selected Item ID: " + selectedNode.(@pk_nodeid));
				
				
				
				
				/*var myXMLList:XMLList = processTreeData.descendants().(@pk_nodeid==69);
				var myXMLNode:XML = myXMLList[0];
				var myDesiredIndex2:int = processTree.getItemIndex(myXMLNode);
				var myAttributeList:XMLList = processTreeData.attribute("@pk_nodeid");*/
				
				
				
				
				
				
				
				if (selectedProcessStatus == 1)
				{

					if (RightPanel.selectedIndex == 1) 
					{
						showProgressBar();
						formsCFC.getProcessInfo(selectedProcessID, currentFormType, currentFormCategory);
					}
					
					if ( (currentFormType == 2) || (currentFormType == 3) || (currentFormType == 4) || (currentFormType == 7) )
					{
						typesCFC.getTypes(currentUser.siteID, currentFormType);
					}
					
					if (currentUser.accessLevel > 3)
					{
						addProcess.setStyle("skinClass", Class(skins.Plus_Green));
						addProcess.toolTip = "Add new process as child of " + selectedProcessName;
						addProcess.visible = true;
						deleteProcess.setStyle("skinClass", Class(skins.Minus_Green));
						deleteProcess.toolTip = "Delete " + selectedProcessName + " process";
						deleteProcess.visible = true;
						restoreProcess.visible = false;
					}
				}

				else
				{
					JobInfo.wrapperGroup.removeAllElements();
					JobInfo.formSelectList.visible = false;
					JobInfo.addFieldGroupButton.visible = false;
					JobInfo.formNamePrompt.visible = false;
					JobInfo.formName.visible = false;
					JobInfo.submitProcessButton.visible = false;
					JobInfo.headerLabel.text = "";

					if (currentUser.accessLevel > 3)
					{
						addProcess.visible = false;
						deleteProcess.visible = false;
						restoreProcess.toolTip = "Restore " + selectedProcessName + " process";
						restoreProcess.setStyle("skinClass", Class(skins.Undo_Green));
						restoreProcess.visible = true;
					}
				}
			}
			
			private function getFormGroupsResult(event:ResultEvent):void 
			{
				if (event.result.MESSAGE == "error") 
				{
					Alert.show("CFC Error");
				}
				else 
				{
					processInfo = event.result.DATA as Array;
				}
			}
			
			public function refreshProcess():void
			{
				showProgressBar();
				formsCFC.getProcessInfo(selectedProcessID, currentFormType, currentFormCategory, currentInstanceID);
			
			}
			
			private function loginUserResult(event:ResultEvent):void
			{
				currentUser = event.result as User;
				//if login succeeds . . . 
				if (currentUser.loggedIn)
				{
					Login.userName.text = null;
					Login.passWord.text = null;
					processesCFC.getProcesses(currentUser.siteID, showAllProcesses.selected);
					jsaMenu.visible = true;	
					siteNameLabel.text = currentUser.siteName;
					userGreeting.text = "Welcome, " + currentUser.firstName + " " + currentUser.lastName;
					if (currentUser.accessLevel > 3)
					{
						adminMenu.visible = true;
						//processTree.editable = true;
					}
					logoutButton.visible = true;
					RightPanel.selectedIndex = 1;
				}
				else
				{
					if (currentUser.errorNotice == "serverError")
					{
						Alert.show("A server error interrupted your request. Please try again.");
					}
					if (currentUser.errorNotice == "loginError")
					{
						Alert.show("No match found. Please try again.");
						Login.userName.text = null;
						Login.passWord.text = null;
					}
				}
			}
			
			private function editTree():void
			{
				processTree.editable = true;
			}
			
			private function onclick_sourcetree(event:Event):void 
			{     
				processTree.editable = false; 
			}  
			
			// the doubleclick event handler  
			private function ondoubleclick_sourcetree(e:Event):void  {     
				
				if ((selectedProcessStatus != 0) && (currentUser.accessLevel > 3))
				{
				processTree.editable = true; 
				processTree.editedItemPosition = {columnIndex:0, rowIndex:processTree.selectedIndex}; 
				}
			} 
			
			private function showProcessBox():void
			{
				processBox = ProcessBox(PopUpManager.createPopUp(this, ProcessBox, true));
				processBox.addProcessButton.addEventListener(MouseEvent.CLICK, processAddProcess);
				processBox.selectedProcessID = selectedProcessID;
				processBox.selectedProcessName = selectedProcessName;
				PopUpManager.centerPopUp(processBox);
			}
			
			private function processAddProcess(event:MouseEvent):void
			{
				var obj:Object = new Object;
				obj.SiteID = currentUser.siteID;
				obj.NodeID = selectedProcessID;
				obj.NodeDescription = event.currentTarget.parentDocument.newProcess.text;
				obj.ProcessType = event.currentTarget.parentDocument.processTypeSelect.selectedItem.ProcessTypeName; 
				obj.UserID = currentUser.userID;
				obj.TimeZone = currentUser.timeZone;
				processesCFC.addProcess({newNode:obj});
				PopUpManager.removePopUp(event.currentTarget.parentDocument);	 
			}
			
			private function addProcessResultHandler(event:ResultEvent):void
			{
				processesCFC.getProcesses(currentUser.siteID, showAllProcesses.selected);
			}
			
			private function deleteProcessResultHandler(event:ResultEvent):void
			{
				if (currentUser.accessLevel > 3)
				{
					addProcess.toolTip = "Add new top-level process";
					addProcess.visible = true;
				}
				restoreProcess.visible = false;
				deleteProcess.visible = false;
				processesCFC.getProcesses(currentUser.siteID, showAllProcesses.selected);
			}
			
			private function deleteSelectedProcess():void
			{
				JobInfo.wrapperGroup.removeAllElements();
				JobInfo.headerLabel.text = "";
				processesCFC.deleteProcess(selectedProcessID, currentUser.userID, currentUser.timeZone);
				selectedProcessID = 0;
				selectedProcessName = "";
			}
			
			private function restoreDeletedProcess():void
			{
				//pass fourth parameter of true to the deleteProcess function to restore a deleted process
				processesCFC.deleteProcess(selectedProcessID, currentUser.userID, currentUser.timeZone, true);
			}
			
			private function toggleDeletedProcesses():void
			{
					processesCFC.getProcesses(currentUser.siteID, showAllProcesses.selected);
			}
			
			private function openItemHandler():void
			{
				processTree.selectedIndex = -1;
				selectedProcessID = 0;
				selectedProcessName = "";
				JobInfo.wrapperGroup.removeAllElements();
				JobInfo.formSelectList.visible = false;
				JobInfo.addFieldGroupButton.visible = false;
				JobInfo.formNamePrompt.visible = false;
				JobInfo.formName.visible = false;
				JobInfo.submitProcessButton.visible = false;
				JobInfo.headerLabel.text = "";
				key.visible = true;
				
				if (currentUser.accessLevel > 3)
				{
					addProcess.setStyle("skinClass", Class(skins.Plus_Green));
					addProcess.toolTip = "Add new top-level process";
					addProcess.visible = true;
					deleteProcess.visible = false;
					restoreProcess.visible = false;					
				}
			}
			
			private function closeItemHandler():void
			{
				addProcess.toolTip = "Add new top-level process";
				deleteProcess.visible = false;
				restoreProcess.visible = false;
				processTree.selectedIndex = -1;
				selectedProcessID = 0;
				selectedProcessName = "";
				JobInfo.wrapperGroup.removeAllElements();
				JobInfo.formSelectList.visible = false;
				JobInfo.addFieldGroupButton.visible = false;
				JobInfo.formNamePrompt.visible = false;
				JobInfo.formName.visible = false;
				JobInfo.submitProcessButton.visible = false;
				JobInfo.headerLabel.text = "";
			}
			
		]]> 
	</fx:Script> 
	
	<fx:Declarations> 
		
		<s:RemoteObject id="processesCFC" destination="ColdFusion" source="jsaplus.cfcs.Processes">
			<s:method name="getProcesses" result="getProcessesResultHandler(event)" />
			<s:method name="addProcess" result="addProcessResultHandler(event)" />
			<s:method name="deleteProcess" result="deleteProcessResultHandler(event)" />
		</s:RemoteObject>
		
		<s:RemoteObject id="typesCFC" destination="ColdFusion" source="jsaplus.cfcs.Types">
			<s:method name="getTypes" result="getTypesResultHandler(event)" />
		</s:RemoteObject>
		
		
		<s:RemoteObject id="loginCFC" destination="ColdFusion" source="jsaplus.cfcs.Login">
			<s:method name="loginUser" result="loginUserResult(event)" />
		</s:RemoteObject>
		
		<s:RemoteObject id="formsCFC" destination="ColdFusion" source="jsaplus.cfcs.Forms">
			<s:method name="getFormGroups" result="getFormGroupsResult(event)" />
			<s:method name="getProcessInfo" result="getProcessInfoResultHandler(event)" fault="genericFaultHandler(event)" />
			<s:method name="getInstances" result="getInstancesResultHandler(event)" fault="genericFaultHandler(event)" />
		</s:RemoteObject>
		
	</fx:Declarations> 
	
	<s:controlBarContent>
		<s:Label width="100%" id="siteNameLabel" styleName="header"/>
		<s:Label id="userGreeting" fontWeight="bold" paddingTop="8"/>
		<s:Spacer width="50"/>
		<s:Image source="@Embed('images/title.png')" />
		<s:DropDownList width="150" id="adminMenu" prompt="Admin" dataProvider="{adminMenuData}" visible="false" change="adminMenuHandler()" />
		<s:DropDownList width="150" id="jsaMenu" prompt="Process Info" dataProvider="{jsaMenuData}" visible="false" change="jsaMenuHandler(event)" />
		<s:Button id="logoutButton" visible="false" label="Log Out" click="Logout();" />
	</s:controlBarContent>
	<s:controlBarLayout>
		<s:HorizontalLayout horizontalAlign="right" paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7" gap="10" />
	</s:controlBarLayout>

	<mx:HDividedBox width="100%" height="100%">
		
		<s:VGroup width="100%" height="100%">
			
		<s:Spacer height="5" />
			
			<s:HGroup>
			<s:Spacer width="10"/>				
			<s:CheckBox id="showAllProcesses" label="Show Deleted Processes" styleName="smallText" visible="false" change="toggleDeletedProcesses()"/>
			</s:HGroup>
			
		<s:HGroup width="75%" height="100%">
			
		<mx:Tree id="processTree" 
			 dataProvider="{processTreeData}"
			 labelField="@nodename" 
			 showRoot="true" 
			 change="treeChanged(event)" 
			 borderSkin="{null}" 
			 itemClick="onclick_sourcetree(event)"
			 doubleClickEnabled="true"
			 itemDoubleClick="ondoubleclick_sourcetree(event)"
			 itemOpen="openItemHandler()" 
			 itemClose="closeItemHandler()"
			 width="75%" height="100%"
			 iconFunction="tree_iconFunc"
			 rollOverColor="0xFFFFFFFF"/>
			
			<!-- 
			allowMultipleSelection="true"
			itemRenderer="testing.TreeItemRendererV1" -->
			
		<s:HGroup>
			<s:Button id="restoreProcess" visible="false" click="restoreDeletedProcess()"/>
			<s:Button id="addProcess" visible="false" click="showProcessBox()"/>
			<s:Button id="deleteProcess" visible="false" click="deleteSelectedProcess()"/>
		</s:HGroup>
		
		</s:HGroup>
			
			<s:VGroup id="key" visible="false" gap="15" paddingBottom="10" paddingLeft="10" horizontalAlign="center">

			<s:Label text="Process Types" styleName="smallText"/>
				
			<s:HGroup gap="5">
				
				<s:Image source="@Embed('images/buttons/process_deleted.png')"/>
				<s:Label text="Deleted Process" styleName="smallText"/>
			</s:HGroup>
				
			<s:HGroup gap="5">
				
			<s:Image source="@Embed('images/buttons/process_type_1.png')"/>
			<s:Label text="Location" styleName="smallText"/>
			<s:Image source="@Embed('images/buttons/process_type_2.png')"/>
			<s:Label text="Department" styleName="smallText"/>
			<s:Image source="@Embed('images/buttons/process_type_3.png')"/>
			<s:Label text="Area" styleName="smallText"/>
			</s:HGroup>	
			<s:HGroup gap="5">
			<s:Image source="@Embed('images/buttons/process_type_4.png')"/>
			<s:Label text="Position" styleName="smallText"/>
			<s:Image source="@Embed('images/buttons/process_type_5.png')"/>
			<s:Label text="Job" styleName="smallText"/>
			<s:Image source="@Embed('images/buttons/process_type_6.png')"/>
			<s:Label text="Task" styleName="smallText"/>
			<s:Image source="@Embed('images/buttons/process_type_7.png')"/>
			<s:Label text="Subtask" styleName="smallText"/>
			
			</s:HGroup>	

			</s:VGroup>

		</s:VGroup>
		
		<mx:ViewStack id="RightPanel" width="100%" height="100%" creationPolicy="auto" >
			<login:Login id="Login" submitLogin="loginCFC.loginUser(Login.userName.text, Login.passWord.text);"/>
			<JSA:JobInfo id="JobInfo" processInfo="{processInfo}" 
						 currentUser = "{currentUser}"
						 currentFormType = "{currentFormType}"
						 selectedProcessID = "{selectedProcessID}"
						 selectedProcessName = "{selectedProcessName}"
						 typesTreeData = "{typesTreeData}"
						 refreshProcess="refreshProcess()"
						 instances="{instances}" />
			<admin:Account id="Account" />
			<admin:Users id="Users" />
		</mx:ViewStack>	
			
	</mx:HDividedBox>
	
</s:Application>
